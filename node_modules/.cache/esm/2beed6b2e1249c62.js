let Joi,CustomeErrorHandler,RefreshToken,User,bcrypt,JwtService,REFRESH_SECRET;_e12‍.x([["default",()=>_e12‍.o]]);_e12‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_e12‍.w("../../services/CustomeErrorHandling",[["default",["CustomeErrorHandler"],function(v){CustomeErrorHandler=v}]]);_e12‍.w("../../models",[["RefreshToken",["RefreshToken"],function(v){RefreshToken=v}],["User",["User"],function(v){User=v}]]);_e12‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_e12‍.w("../../services/JwtService",[["default",["JwtService"],function(v){JwtService=v}]]);_e12‍.w("../../config",[["REFRESH_SECRET",["REFRESH_SECRET"],function(v){REFRESH_SECRET=v}]]);






const registerController = {
  async register(req, res, next) {
    //===========Validation==============================//
    const registerSchema = Joi.object({
      name: Joi.string().min(3).max(30).required(),
      email: Joi.string().email().required(),
      password: Joi.string()
        .pattern(new RegExp("^[a-zA-Z0-9]{3,30}$"))
        .required(),
      repeat_password: Joi.ref("password"),
    });
    const { error } = registerSchema.validate(req.body);
    if (error) {
      return next(error); // passing the error to errorHandler.js
    }

    //==========check if user is in the database already=========//
    try {
      const exist = await User.exists({ email: req.body.email });
      if (exist) {
        return next(
          CustomeErrorHandler.alreadyExist("This email is already taken")
        );
      }
    } catch (error) {
      return next(error); // passing the error
    }

    //==Hash password==//
    const { name, email, password } = req.body;

    const hasedPassword = await bcrypt.hash(password, 10);

    //==prepare the model==//

    const user = new User({ name, email, password: hasedPassword });
    let access_token;
    let refresh_token;
    try {
      const result = await user.save();

      //======Token=======//

      access_token = JwtService.sign({ _id: result._id, role: result.role });
      refresh_token = JwtService.sign(
        { _id: result._id, role: result.role },
        "1y",
        REFRESH_SECRET
      );

      // database whitelist
      await RefreshToken.create({ token: refresh_token });
    } catch (error) {
      return next(error);
    }

    res.json({ access_token, refresh_token });
  },
};

_e12‍.d(registerController);

// * validate the request
// * authorise the request
// * check if user is in the database already
// * prepare model
// * store in database
// * generate jwt token
// * send response
