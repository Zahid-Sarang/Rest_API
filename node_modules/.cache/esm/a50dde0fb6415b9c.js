let Joi,REFRESH_SECRET,RefrshToken,u,CustomeErrorHandler,JwtService;_b64‍.x([["default",()=>_b64‍.o]]);_b64‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_b64‍.w("../../config",[["REFRESH_SECRET",["REFRESH_SECRET"],function(v){REFRESH_SECRET=v}]]);_b64‍.w("../../models",[["RefrshToken",["RefrshToken"],function(v){RefrshToken=v}],["u",["u"],function(v){u=v}]]);_b64‍.w("../../services/CustomeErrorHandling",[["default",["CustomeErrorHandler"],function(v){CustomeErrorHandler=v}]]);_b64‍.w("../../services/JwtService",[["default",["JwtService"],function(v){JwtService=v}]]);





const refreshController = {
  async refresh(req, res, next) {
    //============Validations=========//
    const refreshSchema = Joi.object({
      refresh_token: Joi.string().required(),
    });
    const { error } = refreshSchema.validate(req.body);
    if (error) {
      return next(error);
    }

    // check token in data
    let refreshtoken;

    try {
      refreshtoken = await refreshToken.findOne({
        toke: req.body.refresh_token,
      });
      if (!refreshtoken) {
        return next(CustomeErrorHandler.unAuthorized("Invalid refresh token"));
      }
      let userId;
      try {
        const { _id } = await JwtService.verify(
          refreshtoken.token,
          REFRESH_SECRET
        );
        userId = _id;
      } catch (error) {
        return next(CustomeErrorHandler.unAuthorized("Invalid refresh token"));
      }

      const user = await User.findOne({ _id: userId });
      if (!user) {
        return next(CustomeErrorHandler.unAuthorized("No user found!"));
      }

      // tokens
      const access_token = JwtService.sign({
        _id: user._id,
        role: user.role,
      });
      const refresh_token = JwtService.sign(
        { _id: user._id, role: user.role },
        "1y",
        REFRESH_SECRET
      );

      // database whitelist
      await RefrshToken.create({ token: refresh_token });
      res.json({ access_token, refresh_token });
    } catch (error) {
      return next(new Error("Someting went wrong" + error.message));
    }
  },
};

_b64‍.d(refreshController);
