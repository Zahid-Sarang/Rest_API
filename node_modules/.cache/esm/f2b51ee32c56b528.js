let Joi,bcrypt,User,RefreshToken,CustomeErrorHandler,JwtService,REFRESH_SECRET;_2c5‍.x([["default",()=>_2c5‍.o]]);_2c5‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_2c5‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_2c5‍.w("../../models",[["User",["User"],function(v){User=v}],["RefreshToken",["RefreshToken"],function(v){RefreshToken=v}]]);_2c5‍.w("../../services/CustomeErrorHandling",[["default",["CustomeErrorHandler"],function(v){CustomeErrorHandler=v}]]);_2c5‍.w("../../services/JwtService",[["default",["JwtService"],function(v){JwtService=v}]]);_2c5‍.w("../../config",[["REFRESH_SECRET",["REFRESH_SECRET"],function(v){REFRESH_SECRET=v}]]);







const loginController = {
  async login(req, res, next) {
    // validation
    const loginSchema = Joi.object({
      email: Joi.string().email().required(),
      password: Joi.string()
        .pattern(new RegExp("^[a-zA-Z0-9]{3,30}$"))
        .required(),
    });
    const { error } = loginSchema.validate(req.body);
    if (error) {
      return next(error);
    }
    try {
      const user = await User.findOne({ email: req.body.email });
      if (!user) {
        return next(CustomeErrorHandler.wrongCredentials());
      }

      // Compare the password
      const match = await bcrypt.compare(req.body.password, user.password);
      if (!match) {
        return next(CustomeErrorHandler.wrongCredentials());
      }
      // Token genrate
      const access_token = JwtService.sign({
        _id: user._id,
        role: user.role,
      });
      const refresh_token = JwtService.sign(
        { _id: user._id, role: user.role }, 
        "1y",
        REFRESH_SECRET
      );

      // database whitelist
      await RefreshToken.create({ token: refresh_token });
      res.json({ access_token, refresh_token });
    } catch (err) {
      return next(err);
    }
  },
  //================================================================ Logout ====================================================//
  async logout(req, res, next) {
    // validation
    const refreshSchema = Joi.object({
        refresh_token: Joi.string().required(),
    });
    const { error } = refreshSchema.validate(req.body);

    if (error) {
        return next(error);
    }

    try {
        await RefreshToken.deleteOne({ token: req.body.refresh_token });
    } catch(err) {
        return next(new Error('Something went wrong in the database'));
    }
    res.json({ status: 1 });
}
};

_2c5‍.d(loginController);
